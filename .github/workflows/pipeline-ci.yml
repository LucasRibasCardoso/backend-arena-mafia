name: Pipeline CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest

    # Permissões necessárias para a Action poder publicar pacotes no GHCR
    permissions:
      contents: read
      packages: write

    steps:
      # Baixa o código-fonte do repositório
      - name: Baixar código-fonte
        uses: actions/checkout@v4

      # Set up Java Development Kit (JDK) 21
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      # Aplica a formatação padrão do código
      - name: Aplicar code style
        run: mvn spotless:apply

      # Executa os testes
      - name: Executar testes
        run: mvn -B test

      # Build do JAR com Maven
      - name: Build do JAR com Maven
        if: github.event_name != 'pull_request'
        run: mvn -B -DskipTests clean package

      # Faz o login no GitHub Container Registry (GHCR)
      - name: Login no GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Gera as tags da imagem de forma inteligente
      - name: Extrair metadados para Docker
        if: github.event_name != 'pull_request'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          # Define a estratégia de tags: 'latest' para main, nome da branch para develop, e o hash do commit
          tags: |
            type=ref,event=branch
            type=sha,format=short

      # Constrói e envia a imagem para o GHCR com as tags geradas
      - name: Build e Push da Imagem Docker
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
