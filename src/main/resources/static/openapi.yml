openapi: 3.0.3
info:
  title: API Rest - Backend - Arena Mafia
  version: v1
  description: |
    API Rest para o projeto Arena Mafia, desenvolvido como parte do curso de
    Análise e Desenvolvimento de Sistemas do Instituto Federal de Santa Catarina
    (IFSC) - Campus Canoinhas.
  termsOfService: https://github.com/LucasRibasCardoso/backend-arena-mafia
  license:
    name: Apache 2.0
    url: https://github.com/LucasRibasCardoso

# Componentes reutilizáveis
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Token de autenticação JWT"

  schemas:
    FieldErrorResponseDto:
      type: object
      properties:
        fieldName: {
          type: string,
          description: "Nome do campo que falhou na validação.",
          example: "username"
        }
        message: {
          type: string,
          description: "Mensagem de erro para o campo.",
          example: "O usuario é obrigatório"
        }
      required: [ fieldName, message ]

    ErrorResponseDto:
      type: object
      properties:
        timestamp: {
          type: string,
          format: date-time,
          example: "2025-08-15T13:55:00Z"
        }
        status: {
          type: integer,
          example: 400
        }
        message: {
          type: string,
          example: "Requisição inválida."
        }
        path: {
          type: string,
          example: "/api/some/endpoint"
        }
        fieldErrors:
          type: array
          description: "Lista de erros de validação de campos, se houver."
          items: { $ref: "#/components/schemas/FieldErrorResponseDto" }
          nullable: true
      required: [ timestamp, status, message, path, fieldErrors ]

    LoginRequestDto:
      type: object
      properties:
        username: {
          type: string,
          description: "Nome de usuário.",
          example: "usuario123"
        }
        password: {
          type: string,
          description: "Senha do usuário.",
          example: "senhaSegura"
        }
      required: [ username, password ]

    TokenResponseDto:
      type: object
      properties:
        username: {
          type: string,
          description: "Nome de usuário autenticado.",
          example: "usuario123"
        }
        createdAt: {
          type: string,
          format: date-time,
          description: "Data e hora de criação do token.",
          example: "2025-08-15T13:55:00Z"
        }
        expiresAt: {
          type: string,
          format: date-time,
          description: "Data e hora de expiração do token.",
          example: "2025-08-15T14:55:00Z"
        }
        accessToken: {
          type: string,
          description: "JWT de acesso.",
          example: "eyJhbGci..."
        }
        refreshToken: {
          type: string,
          description: "JWT de refresh.",
          example: "dGhpcyBpcyBhIHJlZnJlc2ggdG9rZW4"
        }
      required: [ username, createdAt, expiresAt, accessToken, refreshToken ]

  responses:
    # Respostas de erro
    ErrorResponseBadRequest:
      description: "Requisição inválida."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponseDto"
          examples:
            # Exemplo 1
            default:
              summary: "Exemplo de requisição genérica inválida"
              value:
                timestamp: "2025-08-15T14:20:00Z"
                status: 400
                message: "Requisição inválida."
                path: "/api/some/endpoint"
                fieldErrors: null

            # Exemplo 2
            fieldErrors:
              summary: "Exemplo de erro com validação de formulário"
              value:
                timestamp: "2025-08-15T14:21:00Z"
                status: 400
                message: "Erro de validação nos campos."
                path: "/api/some/endpoint"
                fieldErrors:
                  - fieldName: "username"
                    message: "O usuário é obrigatório."
                  - fieldName: "password"
                    message: "A senha não pode estar em branco."

    ErrorResponseUnauthorized:
      description: "Requisição não autorizada"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponseDto"
          example:
            timestamp: "2025-08-15T13:55:00Z"
            status: 401
            message: "Usuário ou senha inválidos."
            path: "/api/some/endpoint"
            fieldErrors: null

    ErrorResponseNotFound:
      description: "Recurso não encontrado."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponseDto"
          example:
            timestamp: "2025-08-15T13:55:00Z"
            status: 404
            message: "Recurso solicitado não encontrado."
            path: "/api/resource/123"
            fieldErrors: null

    ErrorResponseForbidden:
      description: "Acesso negado."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponseDto"
          example:
            timestamp: "2025-08-15T13:55:00Z"
            status: 403
            message: "Não autorizado a acessar este recurso."
            path: "/api/some/endpoint"
            fieldErrors: null

    ErrorResponseConflict:
      description: "Conflito de recursos ou estado."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponseDto"
          example:
            timestamp: "2025-08-15T13:55:00Z"
            status: 409
            message: "Usuário já existe."
            path: "/api/some/endpoint"
            fieldErrors: null

    ErrorResponseInternalServerError:
      description: "Erro interno do servidor."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponseDto"
          example:
            timestamp: "2025-08-15T13:55:00Z"
            status: 500
            message: "Erro interno do servidor."
            path: "/api/some/endpoint"
            fieldErrors: null

    # Respostas de Sucesso
    TokenResponse:
      description: "Usuário autenticado com sucesso."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TokenResponseDto"

# Mapeamento dos endpoints da API
paths:
  /api/auth/login:
    post:
      security: [ ]
      tags:
        - Autenticação
      summary: "Autenticação de Usuário"
      description: |
        Endpoint para autenticar um usuário existente.
        Recebe as credenciais e retorna tokens JWT de acesso e refresh.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequestDto"
      responses:
        "200":
          $ref: "#/components/responses/TokenResponse"
        "400":
          $ref: "#/components/responses/ErrorResponseBadRequest"
        "401":
          $ref: "#/components/responses/ErrorResponseUnauthorized"
        "500":
          $ref: "#/components/responses/ErrorResponseInternalServerError"