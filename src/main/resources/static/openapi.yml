openapi: 3.0.3
info:
  title: API Rest - Backend - Arena Mafia
  version: v1
  description: |
    API Rest para o projeto Arena Mafia, desenvolvido como parte do curso de
    Análise e Desenvolvimento de Sistemas do Instituto Federal de Santa Catarina
    (IFSC) - Campus Canoinhas.
  termsOfService: https://github.com/LucasRibasCardoso/backend-arena-mafia
  license:
    name: Apache 2.0
    url: https://github.com/LucasRibasCardoso

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Token de autenticação JWT obtido no login."

  schemas:
    FieldErrorResponseDto:
      type: object
      properties:
        fieldName: {
          type: string,
          description: "Nome do campo que falhou na validação.",
          example: "username"
        }
        message: {
          type: string,
          description: "Mensagem de erro para o campo.",
          example: "O usuario é obrigatório"
        }
      required: [ fieldName, message ]

    ErrorResponseDto:
      type: object
      properties:
        timestamp: {
          type: string,
          format: date-time,
          example: "2025-08-15T13:55:00Z"
        }
        status: {
          type: integer,
          example: 400
        }
        message: {
          type: string,
          example: "Requisição inválida."
        }
        path: {
          type: string,
          example: "/api/some/endpoint"
        }
        fieldErrors:
          type: array
          description: "Lista de erros de validação de campos, se houver."
          items: { $ref: "#/components/schemas/FieldErrorResponseDto" }
          nullable: true
      required: [ timestamp, status, message, path, fieldErrors ]

    LoginRequestDto:
      type: object
      required:
        - username
        - password
      properties:
        username: {
          type: string,
          description: "Nome de usuário.",
          example: "testuser"
        }
        password: {
          type: string,
          description: "Senha do usuário.",
          example: "123456"
        }

    TokenResponseDto:
      type: object
      properties:
        username: {
          type: string,
          description: "Nome de usuário autenticado.",
          example: "usuario123"
        }
        accessToken: {
          type: string,
          description: "JWT de acesso.",
          example: "eyJhbGci..."
        }
      required: [ username, accessToken ]

    SignupRequestDto:
      type: object
      description: Dados necessários para o cadastro de um novo usuário. A senha e a confirmação de senha devem ser idênticas.
      required:
        - username
        - fullName
        - phone
        - password
        - confirmPassword
      properties:
        username:
          type: string
          description: "Nome de usuário único, deve conter apenas letras, números e underscore (_)."
          example: "joao_silva99"
          minLength: 3
          maxLength: 20
          pattern: "^[a-zA-Z0-9_]{3,20}$"
        fullName:
          type: string
          description: "Nome completo do usuário."
          example: "João da Silva"
        phone:
          type: string
          description: "Número de telefone no formato internacional, incluindo o código do país e DDD."
          example: "+5547912345678"
          pattern: "^\\+\\d{10,15}$"
        password:
          type: string
          format: password
          description: "Senha do usuário. Deve ter entre 6 e 20 caracteres."
          example: "senhaForte123"
          minLength: 6
          maxLength: 20
        confirmPassword:
          type: string
          format: password
          description: "Confirmação da senha. Deve ser idêntica ao campo 'password'."
          example: "senhaForte123"

    SignupResponseDto:
      type: object
      properties:
        status:
          type: string
          description: "Status da conta do usuário após o registro."
          example: "pending_verification"
        message:
          type: string
          description: "Mensagem de confirmação do sucesso da operação."
          example: "Usuário registrado com sucesso."
        identifier:
          type: string
          description: "Identificador único (phone) do usuário recém-criado."
          example: "+5547912345678"

    ValidateOtpRequestDto:
      type: object
      description: Dados para verificação da conta via código OTP.
      required:
        - phone
        - code
      properties:
        phone:
          type: string
          description: "Telefone de usuário da conta a ser verificada."
          example: "+5547912345678"
        code:
          type: string
          description: "Código OTP de 6 dígitos recebido por SMS."
          example: "123456"
          pattern: "^\\d{6}$"

    ResendCodeRequestDto:
      type: object
      description: Telefone do usuário que está solicitando o reenvio do código OTP.
      required:
        - phone
      properties:
        phone:
          type: string
          description: "Telefone de usuário da conta para a qual o código deve ser reenviado."
          example: "+5547912345678"

    MessageResponseDto:
      type: object
      properties:
        message:
          type: string
          example: "Operação realizada com sucesso."

    ForgotPasswordRequestDto:
      type: object
      description: Telefone do usuário que está solicitando a alteração da senha.
      required:
        - phone
      properties:
        phone:
          type: string
          description: "Telefone de usuário da conta para a qual a senha deve ser alterada."
          example: "+5547912345678"

    PasswordResetTokenResponseDto:
      type: object
      properties:
        passwordResetToken:
          type: string
          description: "Token temporário para redefinição de senha."
          example: "dawda-1234-asdas-5678-asdasd-9876"

    ResetPasswordRequestDto:
      type: object
      description: "Dados necessários para a etapa final da redefinição de senha."
      required:
        - passwordResetToken
        - newPassword
        - confirmPassword
      properties:
        passwordResetToken:
          type: string
          description: "O token seguro de uso único recebido na etapa de validação do OTP."
          example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        newPassword:
          type: string
          format: password
          description: "A nova senha do usuário. Deve ter entre 6 e 20 caracteres e não pode conter espaços."
          example: "novaSenhaSegura123"
          minLength: 6
          maxLength: 20
          pattern: "^\\S+$"
        confirmPassword:
          type: string
          format: password
          description: "Confirmação da nova senha. Deve ser idêntica ao campo 'newPassword'."
          example: "novaSenhaSegura123"

  responses:
    ErrorResponseBadRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponseDto"
          examples:
            # Exemplo 1
            default:
              summary: "Exemplo de requisição genérica inválida"
              value:
                timestamp: "2025-08-15T14:20:00Z"
                status: 400
                message: "Requisição inválida."
                path: "/api/some/endpoint"
                fieldErrors: null

            # Exemplo 2
            fieldErrors:
              summary: "Exemplo de erro com validação de formulário"
              value:
                timestamp: "2025-08-15T14:21:00Z"
                status: 400
                message: "Erro de validação nos campos."
                path: "/api/some/endpoint"
                fieldErrors:
                  - fieldName: "username"
                    message: "O usuário é obrigatório."
                  - fieldName: "password"
                    message: "A senha não pode estar em branco."

    ErrorResponseUnauthorized:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponseDto"
          example:
            timestamp: "2025-08-15T13:55:00Z"
            status: 401
            message: "Mensagem de erro detalhada."
            path: "/api/some/endpoint"
            fieldErrors: null

    ErrorResponseNotFound:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponseDto"
          example:
            timestamp: "2025-08-15T13:55:00Z"
            status: 404
            message: "Recurso solicitado não encontrado."
            path: "/api/resource/123"
            fieldErrors: null

    ErrorResponseForbidden:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponseDto"
          example:
            timestamp: "2025-08-15T13:55:00Z"
            status: 403
            message: "Usuário não autorizado a acessar este recurso."
            path: "/api/some/endpoint"
            fieldErrors: null

    ErrorResponseConflict:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponseDto"
          example:
            timestamp: "2025-08-15T13:55:00Z"
            status: 409
            message: "Recurso já existe."
            path: "/api/some/endpoint"
            fieldErrors: null

    ErrorResponseInternalServerError:
      description: "Erro interno do servidor."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponseDto"
          example:
            timestamp: "2025-08-15T13:55:00Z"
            status: 500
            message: "Erro interno do servidor."
            path: "/api/some/endpoint"
            fieldErrors: null

    TokenResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TokenResponseDto"

    SignupResponseDto:
      description: Usuário registrado com sucesso. A conta está pendente de verificação.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignupResponseDto'

    MessageResponseDto:
      description: Operação realizada com sucesso.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MessageResponseDto'

    PasswordResetTokenResponseDto:
      description: Token temporário para redefinição de senha.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PasswordResetTokenResponseDto'

# Mapeamento dos endpoints da API
paths:
  /api/auth/login:
    post:
      operationId: login
      tags:
        - Autenticação
      summary: Login do Usuário
      description: |
        Endpoint para autenticar um usuário existente.
        Recebe as credenciais e retorna tokens JWT de acesso e refresh.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequestDto"
      responses:
        "200":
          description: Usuário autenticado com sucesso.
          headers:
            Set-Cookie:
              description: Cookie HttpOnly contendo o token de refresh.
              schema:
                type: string
          content:
            $ref: "#/components/responses/TokenResponse/content"
        "400":
          description: Exceção lançada para requisições inválidas.
          content:
            $ref: "#/components/responses/ErrorResponseBadRequest/content"
        "401":
          description: "Exceção lançada para credenciais inválidas."
          content:
            $ref: "#/components/responses/ErrorResponseUnauthorized/content"
        "403":
          description: Exceção lançada para contas desativadas ou bloqueadas.
          content:
            $ref: "#/components/responses/ErrorResponseForbidden/content"
        "500":
          $ref: "#/components/responses/ErrorResponseInternalServerError"

  /api/auth/refresh-token:
    post:
      operationId: refreshToken
      tags:
        - Autenticação
      summary: Renovação de Token de Acesso
      description: |
        Endpoint para renovar o token de acesso usando o token de refresh.
        O token de refresh deve ser enviado como um cookie HttpOnly.
      parameters:
        - in: cookie
          name: refreshToken
          required: true
          description: O refresh token é recebido no momento do login. O navegador o anexa automaticamente à requisição.
          schema:
            type: string
      responses:
        "200":
          description: Token de acesso renovado com sucesso. Um novo refresh token é retornado no cookie para aumentar a segurança (rotação de tokens).
          headers:
            Set-Cookie:
              description: Cookie HttpOnly contendo o **novo** token de refresh.
              schema:
                type: string
                example: refreshToken=a1b2c3d4-e5f6-7890-1234-567890abcdef...;
          content:
            $ref: "#/components/responses/TokenResponse/content"
        "400":
          description: Exceção lançada para tokens inválidos, expirados ou ausentes.
          content:
            $ref: "#/components/responses/ErrorResponseBadRequest/content"
        "500":
          $ref: "#/components/responses/ErrorResponseInternalServerError"

  /api/auth/signup:
    post:
      operationId: signup
      tags:
        - Autenticação
      summary: Registrar Usuário
      description: |
        Endpoint para registrar um novo usuário.
        Recebe os dados do usuário e cria uma nova conta.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequestDto"
      responses:
        "201":
          description: Usuário registrado com sucesso.
          content:
            $ref: "#/components/responses/SignupResponseDto/content"
        "400":
          description: "Retornado se houver erros de validação nos dados enviados (ex: formato de telefone inválido, senhas não coincidem, campos obrigatórios ausentes)."
          content:
            $ref: "#/components/responses/ErrorResponseBadRequest/content"
        "409":
          description: Exceção lançada se o nome de usuário ou telefone já estiverem em uso.
          content:
            $ref: "#/components/responses/ErrorResponseConflict/content"
        "500":
          $ref: "#/components/responses/ErrorResponseInternalServerError"

  /api/auth/verify-account:
    post:
      operationId: verifyAccount
      tags:
        - Autenticação
      summary: Verificação de Conta de Usuário
      description: |
        Endpoint para verificar uma nova conta de usuário usando o código OTP recebido por SMS.
        Em caso de sucesso, o usuário é automaticamente logado, recebendo os tokens de acesso e refresh.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidateOtpRequestDto"
      responses:
        "200":
          description: Conta verificada e usuário autenticado com sucesso.
          headers:
            Set-Cookie:
              description: Cookie HttpOnly contendo o token de refresh.
              schema:
                type: string
          content:
            $ref: "#/components/responses/TokenResponse/content"
        "400":
          description: Retornado se o código de verificação (OTP) for inválido.
          content:
            $ref: "#/components/responses/ErrorResponseBadRequest/content"
        "404":
          description: Retornado se o nome de usuário não for encontrado.
          content:
            $ref: "#/components/responses/ErrorResponseNotFound/content"
        "409":
          description: Retornado se a conta já estiver ativa (conflito de estado).
          content:
            $ref: "#/components/responses/ErrorResponseConflict/content"
        "500":
          $ref: "#/components/responses/ErrorResponseInternalServerError"

  /api/auth/resend-code:
    post:
      operationId: resendVerificationCode
      tags:
        - Autenticação
      summary: Reenviar Código de Verificação OTP
      description: |
        Endpoint para reenviar o código OTP para verificação de conta.
        Útil se o usuário não recebeu o código inicial ou se expirou.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResendCodeRequestDto"
      responses:
        "200":
          description: Código OTP reenviado com sucesso.
          content:
            $ref: "#/components/responses/MessageResponseDto/content"
        "409":
          description: Retornado se a conta já estiver ativa.
          content:
            $ref: "#/components/responses/ErrorResponseConflict/content"
        "500":
          $ref: "#/components/responses/ErrorResponseInternalServerError"

  /api/auth/logout:
    post:
      operationId: logout
      tags:
        - Autenticação
      summary: Logout do Usuário
      description: |
        Endpoint para realizar o logout do usuário.
        Invalida o token de refresh no servidor e remove o cookie do cliente.
      security:
        - bearerAuth: [ ]
      parameters:
        - in: cookie
          name: refreshToken
          required: false
          description: O refresh token recebido no momento do login. O navegador o anexa automaticamente à requisição.
          schema:
            type: string
      responses:
        "200":
          description: Logout realizado com sucesso.
          content:
            $ref: "#/components/responses/MessageResponseDto/content"
        "401":
          description: Exceção lançada para tokens inválidos, expirados ou ausentes.
          content:
            $ref: "#/components/responses/ErrorResponseUnauthorized/content"
        "500":
          $ref: "#/components/responses/ErrorResponseInternalServerError"

  /api/auth/forgot-password:
    post:
      operationId: forgotPassword
      tags:
        - Autenticação
      summary: Solicitar Redefinição de Senha
      description: |
        Endpoint para iniciar o processo de redefinição de senha.
        Envia um código OTP para o telefone do usuário se a conta existir.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequestDto"
      responses:
        "200":
          description: Mensagem retornada mesmo que a conta não exista, para evitar vazamento de informações.
          content:
            $ref: "#/components/responses/MessageResponseDto/content"
        "500":
          $ref: "#/components/responses/ErrorResponseInternalServerError"

  /api/auth/generate-password-reset-token:
    post:
      operationId: generatePasswordResetToken
      tags:
        - Autenticação
      summary: Confirmar código OTP e gerar Token Temporário para Redefinição de Senha
      description: |
        Endpoint para gerar um token temporário para redefinição de senha.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidateOtpRequestDto"
      responses:
        "200":
          description: Token temporário gerado com sucesso.
          content:
            $ref: "#/components/responses/PasswordResetTokenResponseDto/content"
        "400":
          description: Retornado se ocorrer erro de validação para o código OTP ou telefone.
          content:
            $ref: "#/components/responses/ErrorResponseBadRequest/content"
        "404":
          description: Retornado se o telefone não estiver associado a nenhuma conta.
          content:
            $ref: "#/components/responses/ErrorResponseNotFound/content"
        "500":
          $ref: "#/components/responses/ErrorResponseInternalServerError"

  /api/auth/reset-password:
    post:
      operationId: resetPassword
      tags:
        - Autenticação
      summary: Redefinir a Senha do Usuário
      description: |
        Endpoint final do fluxo de "esqueci a senha".
        Recebe o token temporário da etapa anterior e a nova senha para efetivar a alteração.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequestDto"
      responses:
        "200":
          description: Senha redefinida com sucesso.
          content:
            $ref: "#/components/responses/MessageResponseDto/content"
        "400":
          description: |
            Retornado se houver erros de validação (ex: senhas não coincidem, senha fora do padrão)
            ou se o 'passwordResetToken' for inválido ou expirado.
          content:
            $ref: "#/components/responses/ErrorResponseBadRequest/content"
        "404":
          description: "Retornado em um caso raro onde o usuário associado ao token válido não é mais encontrado."
          content:
            $ref: "#/components/responses/ErrorResponseNotFound/content"
        "500":
          $ref: "#/components/responses/ErrorResponseInternalServerError"