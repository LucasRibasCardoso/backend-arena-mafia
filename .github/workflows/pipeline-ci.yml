name: Pipeline CI

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:

  # Job 1: Executa testes unitários
  unit-tests:
    uses: ./.github/workflows/reusable-test-runner.yml
    with:
      maven_command: 'mvn -B test'

  # Job 2: Executa testes de persistência
  persistence-tests:
    needs: unit-tests
    uses: ./.github/workflows/reusable-test-runner.yml
    with:
      maven_command: 'mvn -B verify -P persistence-tests'

  # Job 3: Executa testes de controller
  controller-tests:
    needs: persistence-tests
    uses: ./.github/workflows/reusable-test-runner.yml
    with:
      maven_command: 'mvn -B verify -P controller-tests'

  # Job 4: Realiza o build da aplicação e publica a imagem Docker no GitHub Container Registry
  build:
    runs-on: ubuntu-latest
    needs: controller-tests
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Baixar código-fonte
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Verifica o code style
        run: mvn spotless:check

      - name: Build do JAR com Maven
        run: mvn -B -DskipTests clean package

      # Faz o login no GitHub Container Registry (GHCR)
      - name: Login no GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_WORKFLOW_TOKEN }}

      # Gera as tags da imagem de forma inteligente
      - name: Extrair metadados para Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          # Define a estratégia de tags: 'latest' para main, nome da branch para develop, e o hash do commit
          tags: |
            type=ref,event=branch
            type=sha,format=short

      # Constrói e envia a imagem para o GHCR com as tags geradas
      - name: Build e Push da Imagem Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
